// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: task_tracker.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TasksTracker_CreateNewTasks_FullMethodName = "/services.TasksTracker/CreateNewTasks"
	TasksTracker_GetListTasks_FullMethodName   = "/services.TasksTracker/GetListTasks"
)

// TasksTrackerClient is the client API for TasksTracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TasksTrackerClient interface {
	CreateNewTasks(ctx context.Context, in *CreateTasksRequest, opts ...grpc.CallOption) (*CreateTasksResponse, error)
	GetListTasks(ctx context.Context, in *GetListTasksRequest, opts ...grpc.CallOption) (*GetListTasksResponse, error)
}

type tasksTrackerClient struct {
	cc grpc.ClientConnInterface
}

func NewTasksTrackerClient(cc grpc.ClientConnInterface) TasksTrackerClient {
	return &tasksTrackerClient{cc}
}

func (c *tasksTrackerClient) CreateNewTasks(ctx context.Context, in *CreateTasksRequest, opts ...grpc.CallOption) (*CreateTasksResponse, error) {
	out := new(CreateTasksResponse)
	err := c.cc.Invoke(ctx, TasksTracker_CreateNewTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksTrackerClient) GetListTasks(ctx context.Context, in *GetListTasksRequest, opts ...grpc.CallOption) (*GetListTasksResponse, error) {
	out := new(GetListTasksResponse)
	err := c.cc.Invoke(ctx, TasksTracker_GetListTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TasksTrackerServer is the server API for TasksTracker service.
// All implementations must embed UnimplementedTasksTrackerServer
// for forward compatibility
type TasksTrackerServer interface {
	CreateNewTasks(context.Context, *CreateTasksRequest) (*CreateTasksResponse, error)
	GetListTasks(context.Context, *GetListTasksRequest) (*GetListTasksResponse, error)
	mustEmbedUnimplementedTasksTrackerServer()
}

// UnimplementedTasksTrackerServer must be embedded to have forward compatible implementations.
type UnimplementedTasksTrackerServer struct {
}

func (UnimplementedTasksTrackerServer) CreateNewTasks(context.Context, *CreateTasksRequest) (*CreateTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewTasks not implemented")
}
func (UnimplementedTasksTrackerServer) GetListTasks(context.Context, *GetListTasksRequest) (*GetListTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListTasks not implemented")
}
func (UnimplementedTasksTrackerServer) mustEmbedUnimplementedTasksTrackerServer() {}

// UnsafeTasksTrackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TasksTrackerServer will
// result in compilation errors.
type UnsafeTasksTrackerServer interface {
	mustEmbedUnimplementedTasksTrackerServer()
}

func RegisterTasksTrackerServer(s grpc.ServiceRegistrar, srv TasksTrackerServer) {
	s.RegisterService(&TasksTracker_ServiceDesc, srv)
}

func _TasksTracker_CreateNewTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksTrackerServer).CreateNewTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TasksTracker_CreateNewTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksTrackerServer).CreateNewTasks(ctx, req.(*CreateTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TasksTracker_GetListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksTrackerServer).GetListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TasksTracker_GetListTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksTrackerServer).GetListTasks(ctx, req.(*GetListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TasksTracker_ServiceDesc is the grpc.ServiceDesc for TasksTracker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TasksTracker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.TasksTracker",
	HandlerType: (*TasksTrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewTasks",
			Handler:    _TasksTracker_CreateNewTasks_Handler,
		},
		{
			MethodName: "GetListTasks",
			Handler:    _TasksTracker_GetListTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task_tracker.proto",
}
